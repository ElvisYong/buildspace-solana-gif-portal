{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","response","publicKey","toString","alert","open","error","connectWallet","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","initialize","accounts","user","wallet","systemProgram","programId","signers","getGifList","onInputChange","event","value","target","sendGif","length","addGif","useEffect","addEventListener","account","fetch","className","onClick","type","placeholder","onChange","map","item","index","alt","src","gifLink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5ada486.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import { useEffect, useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\n\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\n\r\nimport kp from './keypair.json'\r\nimport idl from './idl.json';\r\n\r\n// SystemProgram is a reference to the Solana runtime\r\nconst { SystemProgram } = web3;\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secretKey = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secretKey)\r\n\r\n// Create a keypair for the account that will hold the GIF data.\r\n// let baseAccount = Keypair.generate();\r\n\r\n// Get program's id from the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Control how to acknowledggements are done when a transaction is done.\r\n// Basically can choose how long we want to wait for a transaction to be completed, \"finalized\" or \"processed\" etc\r\n// E.g do we wait for the one node to acknowledge our transaction or the whole Solana chain to acknowledge?\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n// Constants\r\n// const TWITTER_HANDLE = '_buildspace';\r\n// const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\n// const TEST_GIFS = [\r\n//   'https://c.tenor.com/hIOlGyNoehEAAAAC/hologra-holo-graffiti.gif',\r\n//   'https://c.tenor.com/7UX8spygc8wAAAAd/hololive-nakiri-ayame.gif',\r\n//   'https://c.tenor.com/iQ-tmMIKsSkAAAAC/yo-dayo-nakiri.gif',\r\n//   'https://c.tenor.com/ygNn73iaQ7wAAAAC/hololive-subaru.gif',\r\n//   'https://c.tenor.com/SAmNsaoO3HEAAAAC/hololive-%E3%83%9B%E3%83%AD%E3%83%A9%E3%82%A4%E3%83%96.gif',\r\n//   'https://c.tenor.com/-ONQYN540p8AAAAd/%E7%99%BE%E9%AC%BC%E3%81%82%E3%82%84%E3%82%81-%E3%81%82%E3%82%84%E3%82%81.gif'\r\n// ]\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  /*\r\n   * This function holds the logic for deciding if a Phantom Wallet is\r\n   * connected or not\r\n   */\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n\r\n          /*\r\n           * The solana object gives us a function that will allow us to connect\r\n           * directly with the user's wallet!\r\n           */\r\n          const response = await solana.connect();\r\n          console.log(\r\n            'Connected with Public Key:',\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          // Set the user's publickey in state to be used later!\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n        window.open(\"https://phantom.app/\", \"_blank\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n    else {\r\n      window.open(\"https://phantom.app/\", \"_blank\");\r\n    }\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.initialize({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      alert(\"Please enter a GIF URL!\")\r\n      return;\r\n    }\r\n    console.log('Gif link: ', inputValue)\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider)\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        }\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputValue);\r\n\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error)\r\n    }\r\n  };\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  )\r\n\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't be initialized.\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n    // Otherwise, we're good! Account exists. User can submit GIFs.\r\n    else {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter gif link!\"\r\n            value={inputValue}\r\n            onChange={onInputChange}\r\n          />\r\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\r\n            Submit\r\n          </button>\r\n          <div className=\"gif-grid\">\r\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img alt='loading' src={item.gifLink} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  /*\r\n   * When our component first mounts, let's check to see if we have a connected\r\n   * Phantom Wallet\r\n   */\r\n  useEffect(() => {\r\n    window.addEventListener('load', async (event) => {\r\n      await checkIfWalletIsConnected();\r\n    });\r\n  }, []);\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n\r\n      console.log(\"Got the account\", account);\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.error('Error in getGifs', error);\r\n      setGifList(null);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching GIF list...');\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"container\">\r\n          <div className=\"header-container\">\r\n            <p className=\"header\">Ayame GIF Portal</p>\r\n            <p className=\"sub-text\">\r\n              View your Ayame GIF collection in the metaverse âœ¨\r\n            </p>\r\n            {!walletAddress && renderNotConnectedContainer()}\r\n            {walletAddress && renderConnectedContainer()}\r\n          </div>\r\n          {/* <div className=\"footer-container\">\r\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n            <a\r\n              className=\"footer-text\"\r\n              href={TWITTER_LINK}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >{`built on @${TWITTER_HANDLE}`}</a>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}